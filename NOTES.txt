1. Get the application URL by running these commands:

{{- if .Values.ingress.enabled }}
  # If ingress is enabled, construct the URL from ingress hosts and paths
  {{- range $host := .Values.ingress.hosts }}
    {{- range .paths }}
      http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
    {{- end }}
  {{- end }}
{{- else if eq (default "ClusterIP" .Values.miAppPractica.service.type) "NodePort" }}
  # If service type is NodePort, get the NodePort and Node IP for access
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "practica-ramon-keepcoding.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

{{- else if eq (default "ClusterIP" .Values.miAppPractica.service.type) "LoadBalancer" }}
  # If service type is LoadBalancer, check for the LoadBalancer IP (this may take time)
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
  You can watch its status by running:
  kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "practica-ramon-keepcoding.fullname" . }}
  
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "practica-ramon-keepcoding.fullname" . }} --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
  echo http://$SERVICE_IP:{{ .Values.miAppPractica.service.port }}

{{- else if eq (default "ClusterIP" .Values.miAppPractica.service.type) "ClusterIP" }}
  # If service type is ClusterIP, set up port forwarding to access the application
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "practica-ramon-keepcoding.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT

{{- end }}

2. To connect to the MySQL database from within the cluster, run:

kubectl run -i --tty --rm debug --image=mysql:5.7 --env="MYSQL_ROOT_PASSWORD={{ .Values.mysql.rootPassword }}" --restart=Never --namespace {{ .Release.Namespace }} -- mysql -h mysql -u root -p

Enter the root password: {{ .Values.mysql.rootPassword }}

3. To connect to the MySQL database from outside the cluster (if using LoadBalancer or NodePort):

- If using LoadBalancer:
  NOTE: Wait until the LoadBalancer IP is available and accessible.

  kubectl get svc -n {{ .Release.Namespace }} {{ include "practica-ramon-keepcoding.fullname" . }}
  
  Use the external IP of the LoadBalancer and connect to the MySQL instance.

- If using NodePort:
  Get the NodePort and Node IP for external access.
  kubectl get svc -n {{ .Release.Namespace }} {{ include "practica-ramon-keepcoding.fullname" . }}
  
  Access MySQL using:
  mysql -h <NODE_IP> -P <NODE_PORT> -u root -p
